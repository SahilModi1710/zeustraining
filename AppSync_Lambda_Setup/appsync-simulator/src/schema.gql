input EducationalQualificationInput {
  aggregate_percentage: Float!
  passing_year: Int!
  degree: String!
  stream: String!
  college: String!
  college_city: String!
}

input ProfessionalQualificationInput {
  applicant_type: String!
  applied_test: Boolean!
  applied_test_role: String
  familiarTechnologies: [Int!]!
  experienced_qualification: ExperiencedQualificationInput
}

input ExperiencedQualificationInput {
  experience_year: Int!
  current_ctc: String!
  expected_ctc: String!
  notice_period: Boolean!
  notice_period_end: String
  notice_period_duration: Int
  expertiseTechnologies: [Int!]!
}

input UserInput {
  first_name: String!
  last_name: String!
  email: String!
  password: String!
  phone_no: String!
  resume: String!
  portfolio_url: String
  profile_pic: String
  educationalQualifications: EducationalQualificationInput!
  professionalQualifications: ProfessionalQualificationInput!
  jobRoles: [Int!]
}

type JobRole {
  id: Int
  job_title: String
  package: String
  job_description: String
  job_requirements: String
}

type TimeSlot {
  id: Int
  time_slot: String
}

type WalkInDrive {
  id: Int!
  guid: String!
  drive_title: String!
  start_date: String!
  end_date: String!
  location: String!
  jobRoles: [JobRole]
  timeSlots: [TimeSlot]
}

input LoginInput {
  email: String!
  password: String!
}

type OutputLogin {
  id: Int!
  guid: String!
  first_name: String!
  last_name: String!
  email: String!
  profile_pic: String
}

input applicationInput {
  user_id: Int!
  updated_resume: String!
  time_slot: Int!
  walkin_drive_id: Int!
  jobRoles: [Int!]
}

type Mutation {
  CreateUser(input: UserInput!): OutputLogin
  ApplyToDrive(input: applicationInput!): String
}

type Query {
  AllWalkInDrives: [WalkInDrive]
  DriveDetailsByID(guid: String!): [JobRole]
  Login(input: LoginInput!): OutputLogin
}
